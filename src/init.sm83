; various types of init go here

include "hardware.inc"
include "macros.inc"
include "defines.inc"

section "init", rom0
ConsoleCheck:: ; this will be ran at bootup
	; check console
	cp BOOTUP_A_CGB ; check console
	/*jr z, Init
	; not GBC, jump to ROMX, display error and lock up
	rom_bank xWrongConsole, 0 ; bank gets saved in romx
	jp xWrongConsole*/
Init:: ; this will be ran on software reset
	; GBC, jump to ROMX to continue init
	rom_bank xInit, 0 ; bank gets saved in romx
	jp xInit

section "xinit", romx
xInit: ; now we can write sloppy code and no
	; one can complain about the ROM we waste!
	ldh [hShadowROMB], a ; done in romx to save 2 bytes
	ld sp, wStack.origin ; init sp to a saner place
	; zero-init things
		; copy OAM DMA
			ld hl, DMAcopy
			ld de, hDMA
			ld b, hDMA.end - hDMA
			call ShortCpy
		; clear shadow OAM
			xor a
			ld hl, wSOAM
			ld b, wSOAM.end - wSOAM
			call ShortSet
		; clear OAM
			ld a, HIGH(wSOAM)
			call hDMA
	; init single byte variables
	; a is 0 from hDMA
	ldh [hPad1], a
	ldh [hVBlank], a
	; init PPU
	ld a, LCDCF_ON|LCDCF_BGON|LCDCF_WINON|LCDCF_OBJON|LCDCF_BLK21|LCDCF_BG0|LCDCF_WIN1|LCDCF_OBJ8
	ldh [rLCDC], a
	ld a, %00_11_11_11
	ldh [rBGP], a
	ldh [rOBP0], a
	ld a, $ff
	ldh [rWY], a
	; enable interrupts
	ld a, IEF_VBLANK
	ldh [rIE], a
	ei
	; load palette
	ld a, BCPSF_AUTOINC | 0
	ld hl, xPalette + 8*3
	lb bc, 8 / 4, low(rBCPS)
	push af
	push hl
	call SafePalCpy
	pop hl
	pop af
	lb bc, 8 / 4, low(rOCPS)
	call SafePalCpy
	; hack
	xor a
	ld [wSOAM+2], a
	ld [wSOAM+3], a
	jp Title

xPalette::
ds 8+4, $00
incbin "palette.pal", 8, 128 - 8 - 4

/* AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */

section "newsave", rom0
NewSave::
	; verify
		ld hl, Verify
		ld de, wSave.verify
		ld b, Verify.end - Verify
		call ShortCpy
	; set version
		ld a, SAVE_VERSION
		ld [wSave.version], a
	; init player position
		ld a, bank(wActor)
		ldh [rSMBK], a
		ld a, START_Y
		ld [wActor.y], a
		if START_X != START_Y
			ld a, START_X
		endc
		ld [wActor.x], a
		xor a
		ld [wSave.hp], a
		ld [wSave.crc], a ; i get uninit memory reads from this fucker
	; clear map
		ld hl, wSave.map
		ld b, wSave.mapEnd - wSave.map
		call ShortSet
	; clear flags
		ld hl, wSave.flags
		ld b, wSave.flagsEnd - wSave.flags
		call ShortSet
	; clear time
		ld hl, wSave.time
		ld b, wSave.timeEnd - wSave.time
		call ShortSet
	; save
		jp SaveSave

section "savesave", rom0
SaveSave::
	; copy player position
		ld a, bank(wActor)
		ldh [rSMBK], a
		ld a, [wActor.y]
		ld [wSave.y], a
		ld a, [wActor.x]
		ld [wSave.x], a
	; checksum
		ld de, wSave
		ld bc, wSave.crc - wSave
		call Crc32
		dec de ; Crc32 returns with de = wSave.crc + 1
		ld b, 4
		call ShortCpy
	; copy to sram
		ld hl, wSave
		ld de, sSave
		ld b, wSave.end - wSave
		ld a, CART_SRAM_ENABLE
		ld [rRAMG], a
		call ShortCpy
		xor a
		;ld [rRAMG], a
	ret

section "loadsave", rom0
LoadSave:: ; load a save file (a = 0), or returns an error (a != 0)
	; copy to wram
		ld hl, sSave
		ld de, wSave
		ld b, wSave.end - wSave
		ld a, CART_SRAM_ENABLE
		ld [rRAMG], a
		call ShortCpy
		xor a
		;ld [rRAMG], a
	; verify
		ld hl, Verify
		ld de, wSave.verify
		lb bc, Verify.end - Verify, 1
		.verifyLoop
			ld a, [de]
			inc de
			cp [hl]
			inc hl
			jr z, .verifyCorrect
			inc c
			.verifyCorrect
			dec b
			jr nz, .verifyLoop
			ld a, LOAD_WRONGVERIFY
			dec c
			ret nz
	; check version
		ld a, [wSave.version]
		cp SAVE_VERSION
		ld a, LOAD_WRONGVER
		ret nz
	; check checksum
		ld de, wSave
		ld bc, wSave.crc - wSave
		call Crc32
		dec de ; Crc32 returns with de = wSave.crc + 1
		lb bc, 4, 1
		.crcLoop
			ld a, [de]
			inc de
			cp [hl]
			inc hl
			jr z, .crcCorrect
			inc c
			.crcCorrect
			dec b
			jr nz, .crcLoop
			ld a, LOAD_WRONGCRC
			dec c
			ret nz
	; set player stuff
		ld a, bank(wActor)
		ldh [rSMBK], a
		ld a, [wSave.y]
		ld [wActor.y], a
		ld a, [wSave.x]
		ld [wActor.x], a
	; done
		xor a
			assert LOAD_SUCCESS == 0
		ret

section "verify", rom0
Verify::
	db "{-16s:SAVE_VERIFY}"
	.end
	assert @ - Verify <= 16

section "saveshadow", wram0, align[8]
wSave::
	; please increment SAVE_VERSION when the save format is updated,
	; please do not move the verification string or the version byte
	; only change the verification string if theres a good reason to
	.verify ds 16 ; verification string
	.verifyEnd
	.version ds 1 ; save version
	.map:: ds 16*16/8 ; "room seen" bitfield
		.mapEnd::
	.flags:: ds 256/8 ; 256 flags for.. whatever
		.flagsEnd::
	.y ds 1 ; player Y
	.x ds 1 ; player X
	.hp ds 1 ; player HP (unimplemented ofc)
	.time:: ds 4 ; time in thirds, seconds, minutes, and hours
		.timeEnd:: ; hours do not overflow past 255
	.crc ds 4 ; checksum must be last
	.end
	assert high(wSave) == high(.end)

section "save", sram[$a000]
sSave::
	ds wSave.end - wSave

/* AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */

/*section "xwrongconsole", romx
xWrongConsole: ; puts a tiny "GBC-only" text in the center of the screen
	ldh [hShadowROMB], a ; done in romx to save 2 bytes
	; load "GBC-only" tiles into VRAM
	ld hl, .gfx
	ld de, _VRAM+$1000+$10
	ld bc, .gfxEnd - .gfx
	call SafeCpy
	; load the """tilemap""" into SRCN1
	ld hl, .inc
	ld de, _SCRN1+SCRN_VX_B*8+8
	ld bc, 8
	call SafeCpy
	; init palette, LCDC and scroll
	ld a, PALETTE_DMG
	ldh [rBGP], a
	ld a, LCDCF_ON|LCDCF_BGON|LCDCF_BLK21|LCDCF_BG1
		; this is arbitrary as hell just to save 4 bytes
		; on hiding the leftover logo graphics
	ldh [rLCDC], a
	xor a
	ldh [rSCX], a
	ldh [rSCY], a
	ldh [hVBlank], a
	; then endless loop via uninterruptable halt, #BatteryLivesMatter!!
	ldh [rIE], a
	ei
	halt
	; justin case-- ------ ----zU (not a valid password)
	jr @

.inc ; tilemap for .gfx
db 1,2,3,4

.gfx ; tiles that spell out "GBC-only"
	; (*not* bothering with a make rule for this)
pusho
opt g.xX#
dw `.##.##..; "GB"
dw `#...#.#.
dw `#.#.##..
dw `.##.###.
ds 8, $00
dw `.##.....; "C-"
dw `#.......
dw `#...##.#
dw `.##.....
ds 8, $00
dw `......##;"onl"
dw `#..##..#
dw `.#.#.#.#
dw `#..#.#.#
ds 8, $00
dw `.....#.#;"y!!"
dw `.#.#.#.#
dw `.#.#....
dw `..##.#.#
dw `.##.....
ds 6, $00
.gfxEnd
popo*/