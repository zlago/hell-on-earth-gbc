; various types of init go here

include "hardware.inc"
include "macros.inc"
include "defines.inc"

section "init", rom0
ConsoleCheck:: ; this will be ran at bootup
	; check console
	cp BOOTUP_A_CGB ; check console
	jr z, Init
	; not GBC, jump to ROMX, display error and lock up
	ld a, bank(xWrongConsole)
	ld [rROMB], a
	jp xWrongConsole
Init:: ; this will be ran on software reset
	; GBC, jump to ROMX to continue init
	ld a, bank(xInit)
	ld [rROMB], a
	; load palette
	ld a, BCPSF_AUTOINC | 0
	ld hl, Palette
	lb bc, (Palette.end - Palette) / 4, low(rBCPS)
	push af
	push hl
	call SafePalCpy
	pop hl
	pop af
	lb bc, (Palette.end - Palette) / 4, low(rOCPS)
	call SafePalCpy
	jp xInit

section "xinit", romx
xInit: ; now we can write sloppy code and no
	; one can complain about the ROM we waste!
	ld sp, wStack.origin ; init sp to a saner place
	; init LCDC
	ld a, LCDCF_ON|LCDCF_BGON|LCDCF_WINON|LCDCF_OBJON|LCDCF_BLK21|LCDCF_BG0|LCDCF_WIN1|LCDCF_OBJ8
	ldh [rLCDC], a
	ld a, $ff
	ldh [rWY], a
	; zero-init variables
	xor a
	ldh [hPad1], a
	ldh [hPad1.diff], a
	jp Title

Palette:
	incbin "palette.pal"
	.end

/* AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */

section "xwrongconsole", romx
xWrongConsole: ; puts a tiny "GBC-only" text in the center of the screen
	; load "GBC-only" tiles into VRAM
	ld hl, .gfx
	ld de, _VRAM+$1000+$10
	ld bc, .gfxEnd - .gfx
	call SafeCpy
	; load the """tilemap""" into SRCN1
	ld hl, .inc
	ld de, _SCRN1+SCRN_VX_B*8+8
	ld bc, 8
	call SafeCpy
	; init palette, LCDC and scroll
	ld a, PALETTE_DMG
	ldh [rBGP], a
	ld a, LCDCF_ON|LCDCF_BGON|LCDCF_BLK21|LCDCF_BG1
		; this is arbitrary as hell just to save 4 bytes
		; on hiding the leftover logo graphics
	ldh [rLCDC], a
	xor a
	ldh [rSCX], a
	ldh [rSCY], a
	; then endless loop via uninterruptable halt, #BatteryLivesMatter!!
	ldh [rIE], a
	ei
	halt
	; justin case-- ------ ----zU (not a valid password)
	jr @

.inc ; tilemap for .gfx
db 1,2,3,4

.gfx ; tiles that spell out "GBC-only"
	; (*not* bothering with a make rule for this)
pusho
opt g.xX#
dw `.##.##..; "GB"
dw `#...#.#.
dw `#.#.##..
dw `.##.###.
ds 8, $00
dw `.##.....; "C-"
dw `#.......
dw `#...##.#
dw `.##.....
ds 8, $00
dw `......##;"onl"
dw `#..##..#
dw `.#.#.#.#
dw `#..#.#.#
ds 8, $00
dw `.....#.#;"y!!"
dw `.#.#.#.#
dw `.#.#....
dw `..##.#.#
dw `.##.....
ds 6, $00
.gfxEnd
popo