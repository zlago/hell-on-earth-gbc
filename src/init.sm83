; various types of init go here

include "hardware.inc"
include "macros.inc"
include "defines.inc"

section "init", rom0
ConsoleCheck:: ; this will be ran at bootup
	; check console
	cp BOOTUP_A_CGB ; check console
	/*jr z, Init
	; not GBC, jump to ROMX, display error and lock up
	rom_bank xWrongConsole, 0 ; bank gets saved in romx
	jp xWrongConsole*/
Init:: ; this will be ran on software reset
	; GBC, jump to ROMX to continue init
	rom_bank xInit, 0 ; bank gets saved in romx
	jp xInit

section "xinit", romx
xInit: ; now we can write sloppy code and no
	; one can complain about the ROM we waste!
	ldh [hShadowROMB], a ; done in romx to save 2 bytes
	ld sp, wStack.origin ; init sp to a saner place
	; zero-init things
		; copy OAM DMA
			ld hl, DMAcopy
			ld de, hDMA
			ld b, hDMA.end - hDMA
			call ShortCpy
		; clear shadow OAM
			xor a
			ld hl, wSOAM
			ld b, wSOAM.end - wSOAM
			call ShortSet
		; clear OAM
			ld a, HIGH(wSOAM)
			call hDMA
	; init single byte variables
	; a is 0 from hDMA
	ldh [hPad1], a
	ldh [hVBlank], a
	; init PPU
	ld a, LCDCF_ON|LCDCF_BGON|LCDCF_WINON|LCDCF_OBJON|LCDCF_BLK21|LCDCF_BG0|LCDCF_WIN1|LCDCF_OBJ8
	ldh [rLCDC], a
	ld a, %00_11_11_11
	ldh [rBGP], a
	ldh [rOBP0], a
	ld a, $ff
	ldh [rWY], a
	; enable interrupts
	ld a, IEF_VBLANK
	ldh [rIE], a
	ei
	; load palette
	ld a, BCPSF_AUTOINC | 0
	ld hl, xPalette + 8*3
	lb bc, 8 / 4, low(rBCPS)
	push af
	push hl
	call SafePalCpy
	pop hl
	pop af
	lb bc, 8 / 4, low(rOCPS)
	call SafePalCpy
	; hack
	xor a
	ld [wSOAM+2], a
	ld [wSOAM+3], a
	jp Title

xPalette::
ds 8+4, $00
incbin "palette.pal", 8, 128 - 8 - 4

/* AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */

section "createsavefile", rom0
CreateSave:: ; a - file to save to
	push af
	; clear
		ld hl, wSaveFile
		ld b, 0
			assert wSaveFile.end - wSaveFile == $100
		xor a
		call ShortSet
	; set version
		ld a, SAVE_VERSION
		ld [wSaveFile.version], a
	; init player
		ld a, START_Y
		ld [wActor.y], a
		if START_X != START_Y
			ld a, START_X
		endc
		ld [wActor.x], a
	; done, now save the file
		jp SaveSave.prePushed

section "savesavefile", rom0
SaveSave:: ; a - file to save to
	push af
	.prePushed
	; copy player data
		ld a, [wActor.y]
		ld [wSaveFile.y], a
		ld a, [wActor.x]
		ld [wSaveFile.x], a
	; calculate and store checksum
		ld de, wSaveFile
		ld bc, wSaveFile.crc - wSaveFile
		call Crc32
		dec de ; Crc32 returns with de = wSaveFile.crc + 1
		ld b, 4
		call ShortCpy
	; copy to SRAM
		pop af
		add high(sSave)
		ld d, a
		ld e, low(sSave)
		ld hl, wSaveFile
		ld b, 0
			assert wSaveFile.end - wSaveFile == $100
		ld a, CART_SRAM_ENABLE
		ld [rRAMG], a
		call ShortCpy
		xor a
		ld [rRAMG], a
	; done
		ret

section "loadsavefile", rom0
LoadSave:: ; a - file to load
	; copy to wram
		add high(sSave)
		ld h, a
		ld l, low(sSave)
		ld de, wSaveFile
		ld b, 0
			assert wSaveFile.end - wSaveFile == $100
		ld a, CART_SRAM_ENABLE
		ld [rRAMG], a
		call ShortCpy
		xor a
		ld [rRAMG], a
	; load player stuff
		ld a, [wSaveFile.y]
		ld [wActor.y], a
		ld a, [wSaveFile.x]
		ld [wActor.x], a
	; done
		ret

section "verifysavefile", rom0
VerifySave:: ; a - file to check, a = file condition
	; copy to wram
		add high(sSave)
		ld h, a
		ld l, low(sSave)
		ld de, wSaveFile
		ld b, 0
			assert wSaveFile.end - wSaveFile == $100
		ld a, CART_SRAM_ENABLE
		ld [rRAMG], a
		call ShortCpy
		xor a
		ld [rRAMG], a
	; check if empty
		ld a, [wSaveFile.version]
		ld b, a
		and a
		ld a, SAVE_EMPTY
		ret z
	; check if old
		ld a, SAVE_VERSION
		cp b
		ld a, SAVE_OLD
		ret nz
	; calculate checksum
		ld de, wSaveFile
		ld bc, wSaveFile.crc - wSaveFile
		call Crc32
	; and compare it
		dec de ; Crc32 returns with de = wSaveFile.crc + 1
		lb bc, 4, 1 ; 4 bytes, and must be 1
		.crcLoop ; funkiest loop
			ld a, [de]
			inc de
			cp [hl]
			inc hl
			jr z, .crcCorrect
			inc c
			.crcCorrect
			dec b
			jr nz, .crcLoop
			ld a, SAVE_CHECKSUM
			dec c ; if all bytes match, c will be 0 after this
			ret nz
	; if we got this far, all is well!
		ld a, SAVE_VALID
		ret

section "verify", rom0
Verify::
	db "{-16s:SAVE_VERIFY}"
	.end
	assert @ - Verify <= 16

section "saveshadow", wram0, align[8]
wSave::
	.verify:: ds 16 ; verification string
	.verifyEnd::
	.end::

section "savefileshadow", wram0, align[8]
wSaveFile::
	; please increment SAVE_VERSION when the save format is updated,
	; please do not move the verification string or the version byte
	; only change the verification string if theres a good reason to
	.map:: ds 16*16/8 ; "room seen" bitfield
		.mapEnd::
	.flags:: ds 256/8 ; 256 flags for.. whatever
		.flagsEnd::
	.y ds 1 ; player Y
	.x ds 1 ; player X
	.hp ds 1 ; player HP (unimplemented ofc)
	.time:: ds 4 ; time in thirds, seconds, minutes, and hours
		.timeEnd:: ; hours do not overflow past 255
	; please keep these last
	ds 251 - (@ - wSaveFile) ; pad
	.version ds 1 ; save version
	.crc ds 4 
	.end
	align 8

section "save", sram[$a000]
sSave::
	.settings:: ds 256 ; game settings, etc
	.1:: ds wSaveFile.end - wSaveFile ; file A
	.2:: ds wSaveFile.end - wSaveFile ; file B
	.3:: ds wSaveFile.end - wSaveFile ; etc
	.4:: ds wSaveFile.end - wSaveFile
	.5:: ds wSaveFile.end - wSaveFile
	.6:: ds wSaveFile.end - wSaveFile
	.7:: ds wSaveFile.end - wSaveFile
	.end::
	align 8

/* AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */

/*section "xwrongconsole", romx
xWrongConsole: ; puts a tiny "GBC-only" text in the center of the screen
	ldh [hShadowROMB], a ; done in romx to save 2 bytes
	; load "GBC-only" tiles into VRAM
	ld hl, .gfx
	ld de, _VRAM+$1000+$10
	ld bc, .gfxEnd - .gfx
	call SafeCpy
	; load the """tilemap""" into SRCN1
	ld hl, .inc
	ld de, _SCRN1+SCRN_VX_B*8+8
	ld bc, 8
	call SafeCpy
	; init palette, LCDC and scroll
	ld a, PALETTE_DMG
	ldh [rBGP], a
	ld a, LCDCF_ON|LCDCF_BGON|LCDCF_BLK21|LCDCF_BG1
		; this is arbitrary as hell just to save 4 bytes
		; on hiding the leftover logo graphics
	ldh [rLCDC], a
	xor a
	ldh [rSCX], a
	ldh [rSCY], a
	ldh [hVBlank], a
	; then endless loop via uninterruptable halt, #BatteryLivesMatter!!
	ldh [rIE], a
	ei
	halt
	; justin case-- ------ ----zU (not a valid password)
	jr @

.inc ; tilemap for .gfx
db 1,2,3,4

.gfx ; tiles that spell out "GBC-only"
	; (*not* bothering with a make rule for this)
pusho
opt g.xX#
dw `.##.##..; "GB"
dw `#...#.#.
dw `#.#.##..
dw `.##.###.
ds 8, $00
dw `.##.....; "C-"
dw `#.......
dw `#...##.#
dw `.##.....
ds 8, $00
dw `......##;"onl"
dw `#..##..#
dw `.#.#.#.#
dw `#..#.#.#
ds 8, $00
dw `.....#.#;"y!!"
dw `.#.#.#.#
dw `.#.#....
dw `..##.#.#
dw `.##.....
ds 6, $00
.gfxEnd
popo*/