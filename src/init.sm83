; various types of init go here

include "hardware.inc"
include "macros.inc"
include "defines.inc"

section "init", rom0
ConsoleCheck:: ; this will be ran at bootup
	; check console
	cp BOOTUP_A_CGB ; check console
	jr z, Init
	; not GBC, jump to ROMX, display error and lock up
	rom_bank xWrongConsole, 0 ; bank gets saved in romx
	jp xWrongConsole
Init:: ; this will be ran on software reset
	; GBC, jump to ROMX to continue init
	rom_bank xInit, 0 ; bank gets saved in romx
	jp xInit

section "xinit", romx
xInit: ; now we can write sloppy code and no
	; one can complain about the ROM we waste!
	ldh [hShadowROMB], a ; done in romx to save 2 bytes
	ld sp, wStack.origin ; init sp to a saner place
	; init LCDC
	ld a, LCDCF_ON|LCDCF_BGON|LCDCF_WINON|LCDCF_OBJON|LCDCF_BLK21|LCDCF_BG0|LCDCF_WIN1|LCDCF_OBJ8
	ldh [rLCDC], a
	ld a, $ff
	ldh [rWY], a
	; zero-init things
		; copy OAM DMA
			ld hl, DMAcopy
			ld de, hDMA
			ld b, hDMA.end - hDMA
			call ShortCpy
		; clear shadow OAM
			xor a
			ld hl, wSOAM
			ld b, wSOAM.end - wSOAM
			call ShortSet
		; clear OAM
			ld a, HIGH(wSOAM)
			call hDMA
	; init single byte variables
	; a is 0 from hDMA
	ldh [hPad1], a
	ldh [hPad1.diff], a
	ldh [hVBlank], a
	; enable interrupts
	ld a, IEF_VBLANK
	ldh [rIE], a
	ei
	; load palette
	ld a, BCPSF_AUTOINC | 0
	ld hl, Palette
	lb bc, (Palette.end - Palette) / 4, low(rBCPS)
	push af
	push hl
	call SafePalCpy
	pop hl
	pop af
	lb bc, (Palette.end - Palette) / 4, low(rOCPS)
	call SafePalCpy
	; hack
	xor a
	ld [wSOAM+2], a
	ld [wSOAM+3], a
	jp Title

Palette:
	incbin "palette.pal"
	.end

/* AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */

section "newsave", rom0
NewSave::
	; verify
		ld hl, Verify
		ld de, wSave.verify
		ld b, Verify.end - Verify
		call ShortCpy
	; init player position
		ld a, bank(wxActor)
		ldh [rSMBK], a
		ld a, START_Y
		ld [wxActor.y], a
		if START_X != START_Y
			ld a, START_X
		endc
		ld [wxActor.x], a
	; clear map
		xor a
		ld hl, wSave.map
		ld b, wSave.mapEnd - wSave.map
		call ShortSet
	; clear flags
		ld hl, wSave.flags
		ld b, wSave.flagsEnd - wSave.flags
		call ShortSet
	; save
		jp SaveSave

section "savesave", rom0
SaveSave::
	; copy player position
		ld a, bank(wxActor)
		ldh [rSMBK], a
		ld a, [wxActor.y]
		ld [wSave.y], a
		ld a, [wxActor.x]
		ld [wSave.x], a
	; checksum
		ld de, wSave
		ld bc, wSave.checksum - wSave
		call Crc32
		dec de ; Crc32 returns with de = wSave.checksum + 1
		ld b, 4
		call ShortCpy
	; copy to sram
		ld hl, wSave
		ld de, sSave
		ld b, wSave.end - wSave
		ld a, CART_SRAM_ENABLE
		ld [rRAMG], a
		call ShortCpy
		xor a
		;ld [rRAMG], a
	ret

section "loadsave", rom0
LoadSave:: ; load a save file, or create one if it doesnt exist
	; copy to wram
		ld hl, sSave
		ld de, wSave
		ld b, wSave.end - wSave
		ld a, CART_SRAM_ENABLE
		ld [rRAMG], a
		call ShortCpy
		xor a
		;ld [rRAMG], a
	; verify
		ld hl, Verify
		ld de, wSave.verify
		ld b, Verify.end - Verify
		.verifyLoop
			ld a, [de]
			inc de
			cp [hl]
			inc hl
			jp nz, NewSave
			dec b
			jr nz, .verifyLoop
	; check checksum
		ld de, wSave
		ld bc, wSave.checksum - wSave
		call Crc32
		dec de ; Crc32 returns with de = wSave.checksum + 1
		ld b, 4
		.crcLoop
			ld a, [de]
			inc de
			cp [hl]
			inc hl
			call nz, iCrash
			dec b
			jr nz, .crcLoop
	; set player stuff
		ld a, bank(wxActor)
		ldh [rSMBK], a
		ld a, [wSave.y]
		ld [wxActor.y], a
		ld a, [wSave.x]
		ld [wxActor.x], a
	ret

if def(VERIFY) == 0
	def VERIFY equs "femboys~"
	endc
section "verify", rom0
Verify::
	db "{-8s:VERIFY}"
	.end
	assert @ - Verify <= 8

section "saveshadow", wram0, align[8]
wSave::
	.verify ds 8
	.verifyEnd
	.y ds 1
	.x ds 1
	.hp ds 1
	.map ds 16*16/8
		.mapEnd
	.flags ds 256/8
		.flagsEnd
	.checksum ds 4 ; checksum must be last
	.end
	assert high(wSave) == high(.end)

section "save", sram[$a000]
sSave::
	ds wSave.end - wSave

/* AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */

section "xwrongconsole", romx
xWrongConsole: ; puts a tiny "GBC-only" text in the center of the screen
	ldh [hShadowROMB], a ; done in romx to save 2 bytes
	; load "GBC-only" tiles into VRAM
	ld hl, .gfx
	ld de, _VRAM+$1000+$10
	ld bc, .gfxEnd - .gfx
	call SafeCpy
	; load the """tilemap""" into SRCN1
	ld hl, .inc
	ld de, _SCRN1+SCRN_VX_B*8+8
	ld bc, 8
	call SafeCpy
	; init palette, LCDC and scroll
	ld a, PALETTE_DMG
	ldh [rBGP], a
	ld a, LCDCF_ON|LCDCF_BGON|LCDCF_BLK21|LCDCF_BG1
		; this is arbitrary as hell just to save 4 bytes
		; on hiding the leftover logo graphics
	ldh [rLCDC], a
	xor a
	ldh [rSCX], a
	ldh [rSCY], a
	ldh [hVBlank], a
	; then endless loop via uninterruptable halt, #BatteryLivesMatter!!
	ldh [rIE], a
	ei
	halt
	; justin case-- ------ ----zU (not a valid password)
	jr @

.inc ; tilemap for .gfx
db 1,2,3,4

.gfx ; tiles that spell out "GBC-only"
	; (*not* bothering with a make rule for this)
pusho
opt g.xX#
dw `.##.##..; "GB"
dw `#...#.#.
dw `#.#.##..
dw `.##.###.
ds 8, $00
dw `.##.....; "C-"
dw `#.......
dw `#...##.#
dw `.##.....
ds 8, $00
dw `......##;"onl"
dw `#..##..#
dw `.#.#.#.#
dw `#..#.#.#
ds 8, $00
dw `.....#.#;"y!!"
dw `.#.#.#.#
dw `.#.#....
dw `..##.#.#
dw `.##.....
ds 6, $00
.gfxEnd
popo