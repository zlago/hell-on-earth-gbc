; le main file for this
; 
;        /"""/  /"""//"""""""""//"""/      /"""/
;       /   /  /   //   ______//   /      /   /
;      /   /  /   //   /      /   /      /   /
;     /    """   //    """""//   /      /   /
;    /   ___    //   ______//   /      /   /
;   /   /  /   //   /      /   /      /   /
;  /   /  /   //    """""//    """""//    """""/
; /___/  /___//_________//_________//_________/
; honestly i just dont know how to name this

; wanna help? ctrl+f for "todo:"

include "hardware.inc"
include "macros.inc"
include "defines.inc"

section "icrash", rom0[$38]
iCrash::
	ld b, b
	jr @

section "ivblank", rom0[$40]
iVBlank: ; push and jump to the real handler
	push af
	push bc
	push de
	push hl
	jp VBlank

for V, 4
section "int{x:V}" , rom0[$48+(V*8)]
iInt{x:V}:
	rst iCrash
endr

section "header", rom0[$100]
	di
	jp ConsoleCheck
	; logo (top, checked by gbc)
	db $ce,$ed,$66,$66,$cc,$0d,$00,$0b,$03,$73,$00,$83
	db $00,$0c,$00,$0d,$00,$08,$11,$1f,$88,$89,$00,$0e
	; logo (bottom, not checked by gbc)
	db $dc,$cc,$6e,$e6,$dd,$dd,$d9,$99,$bb,$bb,$67,$63
    db $6e,$0e,$ec,$cc,$dd,$dc,$99,$9f,$bb,$b9,$33,$3e
section "header2", rom0[$100+24+24+4]
	; rest of header (handled by rgbfix)
	ds $150-@, $00

section "title", rom0
Title:: ; load splash screen
		rom_bank xSplash1bpp
		; load tileset
			ld hl, xSplash1bpp
			ld de, _VRAM + $1000
			ld bc, xSplash1bpp.end - xSplash1bpp
			call Safe1bppCpy
		; load save tiles???
			ld hl, xSaveMenu1bpp
			ld de, _VRAM + $800
			ld bc, xSaveMenu1bpp.end - xSaveMenu1bpp
			call Safe1bppCpy
		; load cursor
			ld hl, FuckingCursor
			ld de, _VRAM + $0
			ld bc, FuckingCursor.end - FuckingCursor
			call Safe1bppCpy
		; load map
			ld hl, xSplashTilemap
			ld de, _SCRN0
			ld bc, 144 * 4
			call SafeCpy
	TitleSplash:: ; load specifically the `Press [Start]`
		rom_bank xSplashTilemap
		ld hl, xSplashTilemap + 96 * 4
		ld de, _SCRN0 + 96 * 4
		ld bc, 24 * 4
		call SafeCpy
	.loop
	halt
	; poll
		call Joy
	; wait untill start is pressed
		ld a, [hPad1.press]
		and PADF_START
		jr z, .loop
	TitleMenu:: ; load the menu thing
		rom_bank xSplashTilemap
		ld hl, xSplashTilemap + 144 * 4
		ld de, _SCRN0 + 96 * 4
		ld bc, 24 * 4
		call SafeCpy
	.loop
	halt
	; poll
		call Joy
	; wait untill start is pressed
		ld a, [hPad1.press]
		and PADF_START
		jr z, .loop
	TitleSaves: ; load the funny menu
		ld hl, xSaveMenuTilemap
		ld de, _SCRN1
		lb bc, 8, 5
		call SafeRectCopy
			assert xSaveMenuTilemap.end - 256 <= xSaveMenuTilemap
		ld a, WX_OFS
		ldh [rWX], a
		ld a, 144
		.win
		halt
		sub 8
		ldh [rWY], a
		cp 144 - 64
		jr nz, .win
		.loop
		halt
		; poll
			call Joy
		; wait untill start is pressed
			ld a, [hPad1.press]
			and PADF_START
			jr z, .loop
	; clear map
		xor a
		ld hl, _SCRN0
		ld bc, (_SCRN1 - _SCRN0) * 2
		call SafeSet
	jp Main

FuckingCursor:
	db %00000000
	db %00110000
	db %00101000
	db %00100100
	db %00100100
	db %00101000
	db %00110000
	db %00000000
	.end

	/* clear save if select is pressed
		ld a, [hPad1.press]
		and PADF_SELECT
		jr z, .noClear
		call NewSave
		ld a, $36 | AUD1SWEEP_DOWN
		ldh [rAUD1SWEEP], a
		ld a, AUDLEN_DUTY_50
		ldh [rAUD1LEN], a
		ld a, $c2
		ldh [rAUD1ENV], a
		ld a, low($769)
		ldh [rAUD1LOW], a
		ld a, high($769) | AUDHIGH_RESTART
		ldh [rAUD1HIGH], a
		.noClear */

	/* swap palette if A is pressed
		ld a, [hPad1.press]
		and PADF_A
		jr z, .noSwap
		ldh a, [rBGP]
		cpl
		ldh [rBGP], a
		ldh [rOBP0], a
		.noSwap */

section "main", rom0
Main::
	; try to load save
		call LoadSave
		and a
			assert LOAD_SUCCESS == 0
		jr z, .loadSuccess
		cp LOAD_WRONGVER
		jp z, Title
		call NewSave
		.loadSuccess
	; load tileset
		rom_bank xTileset1bpp
		ld hl, xTileset1bpp
		ld de, vTileset
		ld bc, vTileset.end - vTileset
		call Safe1bppCpy
	; load player
		ld hl, xPlayer2bpp
		ld de, _VRAM
		ld bc, xPlayer2bpp.end - xPlayer2bpp
		call SafeCpy
	; load the map menu tiles
		rom_bank xMapMenu1bpp
		ld hl, xMapMenu1bpp
		ld de, vMenuText
		ld bc, xMapMenu1bpp.end - xMapMenu1bpp
		call Safe1bppCpy
	; todo: load statusbar
	; set window
		ld a, WX_OFS+128
		ldh [rWX], a
		xor a
		ldh [rWY], a
	; load vMapText tilemap
		ld e, low(vMapText>>4)
		ld hl, $9a00
		lb bc, 16, 16
	.copyLoop
		ldh a, [rSTAT]
		and STATF_BUSY
		jr nz, .copyLoop
		ld [hl], e
		inc l
		inc e
		dec b
		jr nz, .copyLoop
		add hl, bc
		ld b, c
		ld a, low(vMapText >> 4) + 32
		cp e
		jr nz, .copyLoop
	; load the map
		call LoadMap
MainLoop::
	halt
	; DMA shadowOAM
		ld a, high(wSOAM)
		call hDMA
	; poll input
		call Joy
	; move player
		call MovePlayer
	; fill shadowOAM
		call Display
	; tick game length timer
		call TickTimer
	; pause (if start is pressed)
		ld a, [hPad1.press]
		and PADF_START
		call nz, Pause
	jr MainLoop

macro load_menu_map
	; first some init
		; hl - dst, de - src, c (stack) - len/8 or map bitfield byte, c - len%8, b - bits
		rom_bank xMapMenuTilemap
		ld de, xMapMenuTilemap
		ld hl, _SCRN1+4
		ld c, (xMapMenuTilemap.end - xMapMenuTilemap) / 8
	.loopBytes ; put bits in b and length%8 in c
		push bc
		ld a, low(wSave.mapEnd)
		sub c
			assert high(wSave.map) == high(wSave.mapEnd)
		push de
		ld d, high(wSave.mapEnd)
		ld e, a
		ld a, [de]
		pop de
		ld b, a
		ld c, 8
	.loopBits ; copy 8 map tiles, with "undiscovered" blanked
		ldh a, [rSTAT]
		and STATF_BUSY
		jr nz, .loopBits
		ld a, [de]
		srl b
		jr c, .noBlank
		ld a, $01 ; replace with blank tile if map tile is unexplored
		.noBlank
		ld [hl+], a ; 9-10/16 cycles
		inc de
		dec c
		jr nz, .loopBits
	; check if hl needs inc*16
		pop bc
		bit 0, c
		jr z, .skipInc
		ld a, 16
		; add hl, a
		add l
		ld l, a
		adc h
		sub l
		ld h, a
		.skipInc
		dec c
		jr nz, .loopBytes
	endm

if def(PAUSE_SLIDE_SPEED) == 0
	def PAUSE_SLIDE_SPEED equ 8
	endc
	assert 128 % PAUSE_SLIDE_SPEED == 0
Pause::
	; todo: HUD
	; todo: icons for various things
		; (currently not possible as this
		; will fuck up rendering which is
		; a hack and needs to be fixed)
	; load the menu map
		load_menu_map
	; slide the window in
		ld a, WX_OFS + 128
		.win
		halt
		sub PAUSE_SLIDE_SPEED
		ldh [rWX], a
		cp a, WX_OFS + 0
		jr nz, .win
	; save
		call SaveSave
	; 
PauseLoop::
	halt
	; poll input
		push bc
		call Joy
		pop bc
	; reset pos if select is pressed
		ld a, [hPad1.press]
		and PADF_SELECT
		jr z, .noReset
		ld a, bank(wActor)
		ldh [rSMBK], a
		ld a, START_Y
		ld [wActor.y], a
		if START_X != START_Y
			ld a, START_X
		endc
		ld [wActor.x], a
		call LoadMap
		jr .unpause
		.noReset
	; unpause (if start is pressed)
		ld a, [hPad1.press]
		and PADF_START
	jr z, PauseLoop
	; slide the window out
	.unpause
	ld a, WX_OFS + 0
	.win
	halt
	add PAUSE_SLIDE_SPEED
	ldh [rWX], a
	cp a, WX_OFS + 128
	jr nz, .win
	; done
	ret

section "objects", rom0
Display: ; todo: replace this nonsense
	ld a, bank(wActor)
	ldh [rSMBK], a
	ld a, [wActor.y]
	res 4, a
	add 2 ; offset
	add a
	add a
	add a
	ld [wSOAM+0], a
	ld a, [wActor.x]
	res 4, a
	inc a ; offset
	add a
	add a
	add a
	ld [wSOAM+1], a
	ret

section "time", rom0
TickTimer: ; increment the timer
; (t - thirds, s - seconds, m - minutes, h - hours)
	ld hl, wSave.time
	lb bc, $60, $01 ; t/s/m in an s/m/h, inc a
	ld e, 3 ; 1 iteration for each of t, s, m
.loop ; increment t/s/m
	ld a, [hl]
	add c ; inc a with proper flags
	daa ; then adjust
	ld [hl], a
	sub b ; sets carry if t/s/m didnt overflow
	ret c
	; save on overflow, and overflow into the next value
	ld [hl+], a
	dec e
	jr nz, .loop
	; increment h
	ld a, [hl]
	inc a
	ret z ; dont increment on overflow
		; (if you get 255h legit i will give you <absolutely nothing>)
	ld [hl], a
	ret

section "player", rom0
MovePlayer: ; this is a black box im telling you
	; check if player wants to move
	ld a, [hPad1.press]
	and PADF_UP | PADF_DOWN | PADF_LEFT | PADF_RIGHT
	ret z
	; if so, move
		ld b, a
		; todo: wrap this into a 
		; vertically
			ld a, [wActor.x]
			ld l, a
			ld a, [wActor.y]
			; down
			sla b
			adc 0
			; up
			sla b
			sbc 0
			ld h, a
			ld c, a
			; check if colliding
			call CollideMap
			and TILE_SOLID
			; discard if so
			jr nz, .skipV
			ld a, c
			ld [wActor.y], a
			.skipV
		; horizontally
			ld a, [wActor.y]
			ld h, a
			ld a, l
			; left
			sla b
			sbc 0
			; right
			sla b
			adc 0
			; check if colliding
			ld l, a
			call CollideMap
			and TILE_SOLID
			; discard if so
			jr nz, .skipH
			ld a, l
			ld [wActor.x], a
			.skipH
		ld c, $f0
	; check if hi(plrX) != hi(CamX)
		ld a, [wActor.x]
		ld b, a
		ldh a, [hCamera.x]
		xor b
		and c
		jr nz, .load
	; check if hi(plrY) != hi(CamY)
		ld a, [wActor.y]
		ld b, a
		ldh a, [hCamera.y]
		xor b
		and c
	.load ; if either !=, reload the map
		jp nz, LoadMap ; tail call???
	ret

section "fetchmaptile", rom0 ; name possibly misleading?
FetchMapTile:: ; h - Y, l - X, rROMB = bank, hl = tile, clobbers de
	; since hl is practically already pointing to the
	; tile we only need to actually fetch the bank
	; fetch and switch to bank
	ld a, h
	rlca
	rlca
	or %11111100
		assert low(MapLut) == %11111100
	ld e, a
	ld d, high(MapLut)
	ld a, [de]
	rom_bank 0
	; adjust h
	res 7, h
	set 6, h
		assert high(xMap1)  == (%0<<7) | (%1<<6)
	ret

section "loadmap", rom0
LoadMap::
	ld a, bank(wActor)
	ldh [rSMBK], a
	; fetch the screen bank & pointer, update camera
		ld a, [wActor.y]
		and $f0
		ldh [hCamera.y], a
		ld h, a
		ld a, [wActor.x]
		and $f0
		ldh [hCamera.x], a
		ld l, a
		call FetchMapTile
	; load the room into VRAM
		; load c and de
		ld c, 16 ; couldnt come up with a constant for this
		ld de, _SCRN0
		.column ; copy a column of rows
			ld b, 16/2 ; or this
			push hl ; faster to add 256 than 16 then 240
			.row ; copy a row
				.wait ; wait for safe access
					ldh a, [rSTAT]
					and STATF_BUSY
					jr nz, .wait
				rept 2 ; copy two bytes
					ld a, [hl+]
					ld [de], a
					inc e
					endr
				dec b
				jr nz, .row
			; adjust for the next row
				; hl
					pop hl
					inc h
				; de
					ld a, e
					add 15
					ld e, a
					inc de
				; then decrement counter
					dec c
					jr nz, .column
	; set the text renderer to display the rooms flavor text
		; fetch position
			ldh a, [hCamera.x]
			ld b, a
			ldh a, [hCamera.y]
			swap b
			or a, b
		; get bank and address
			; i wanted to wrap this in a macro but it wouldnt work
			; bank
			ld h, a
			rlca
			rlca
			and %00000011
				assert low(FlavorLut) == %00000000
			ld e, a
			ld d, high(FlavorLut)
			ld a, [de]
			; addr
			res 7, h
			set 6, h
				assert high(xFlavor1)  == (%0<<7) | (%1<<6)
		; set handler
			di
			ld [wVBlankText.bank], a
			ld a, h
			ld [wVBlankText.src], a
			ld a, high(vMapText)
			ld [wVBlankText.dst], a
			xor a
			ld [wVBlankText.counter], a
			ldh a, [hVBlank]
			or VBLANK_TEXT
			ldh [hVBlank], a
			ei
	; mark room as explored in the save
		; a needs to be top 5 bits, b bottom 3
			ldh a, [hCamera.x]
			ld b, a
			ldh a, [hCamera.y]
			; swap clears carry, 4-0 are top 5 bits, xxx are bottom 3, . bits are reset
			;   bit 76543210, cy
			swap a; 4321...., ? -> ....4321, .
			rlc b ; 0xxx...., . -> xxx....0, 0
			srl b ; xxx....0, . -> .xxx...., 0
			adc a ; ....4321, 0 -> ...43210, .
			swap b; .xxx...., . -> .....xxx, .
		; set hl to wSave.map + a
			add low(wSave.map)
				assert high(wSave.map) == high(wSave.mapEnd)
			ld h, high(wSave.map)
			ld l, a
		; set a's bth bit
			inc b
			xor a
			scf
			.bitshift
			rla
			dec b
			jr nz, .bitshift
		; mark room as explored in the save
			or a, [hl]
			ld [hl], a
	; load the rooms palette
			; fetch the palette
			ldh a, [hCamera.y]
			ld b, a
			ldh a, [hCamera.x]
			swap a
			or b
			ld h, high(xMapColors)
			ld l, a
				assert low(xMapColors) == 0
			rom_bank xMapColors
			ld a, [hl]
			; 
			add a
			add a
			add a
		; load a pointer, offset by the color
			ld hl, xPalette
			add l
			ld l, a
			adc h
			sub l
			ld h, a
		; load palette
			rom_bank xPalette
			ld a, BCPSF_AUTOINC | 0
			lb bc, 8 / 4, low(rBCPS)
			push af
			push hl
			call SafePalCpy
			pop hl
			pop af
			lb bc, 8 / 4, low(rOCPS)
			call SafePalCpy
	; done
	ret

section "hram", hram
hCamera::
	.y ds 1 ; y position of camera
	.x ds 1 ; x position of camera
hShadowROMB:: ds 1 ; shadow of the bank register
hVBlank:: ds 1 ; ; "task list" for VBlank handler

section "collidemap", rom0
CollideMap:: ; h - Y, l - X, h = %01000000 | (h & %00111111)
	call FetchMapTile
.noSwitch:: ; preserves hl
	ld a, [hl]
	push hl
	ld h, high(TileProperties)
	ld l, a
	ld a, [hl]
	pop hl
	; done
	ret

section "actors", wramx, align[8]
wActor::
	.type:: ds 1
	.y::    ds 1
	.x::    ds 1
	ds 256 - (@ - wActor)
.next:: ds 256*(MAX_ACTORS - 1)

section "tileset", romx
xTileset1bpp:
	load "vtileset", vram[$9000]
	vTileset:
	incbin "tileset.1bpp"
	.end
	endl
	pushs
	section "vtileset2", vram[$9000+(vTileset.end - vTileset)]
	vTileset2:
	ds vTileset.end - vTileset
	pops
xPlayer2bpp:
	incbin "player.2bpp"
	.end

section "maptext", vram[$8c00]
vMapText::
	ds $10 * 16 * 2
	.end::

section "menutext", vram[$8e00]
vMenuText: ; mmm this aged so well
	ds $10 * 16 * 2
	.end

section "mapmenu", romx
xMapMenu1bpp:
	incbin "mapmenu.1bpp"
	.end
xMapMenuTilemap:
	incbin "mapmenu.tilemap"
	.end

section "titledata", romx
xSplash1bpp:
	incbin "splash.1bpp"
	.end
xSplashTilemap:
	incbin "splash.tilemap"
	.end
xSaveMenu1bpp:
	incbin "savemenu.1bpp"
	.end
align 8
xSaveMenuTilemap:
	incbin "savemenu.tilemap"
	.end
xSaveIcons:
	.end

section "mapcolors", romx, align[8]
xMapColors:
incbin "map.palmap"

for V, 4
section "map{x:V}", romx
xMap{x:V}::
	incbin "map.bin", V*16384, 16384
endr

for V, 4
section "flavor{x:V}", romx
xFlavor{x:V}::
	for V2, 4
		for V3, 16 ; cursed code to interleave 1bpp tiles
			incbin "flavor.bin", (V*16384)+(V2*4096)+(V3*128)+(000*16), 128
			incbin "flavor.bin", (V*16384)+(V2*4096)+(V3*128)+(128*16), 128
			;print (V*128)+(V2*32)+(V3*1)+(0*16), " " ; was used to debug if i properly did this thing
			;print (V*128)+(V2*32)+(V3*1)+(1*16), " "
		endr
	endr
endr

section "maplut", rom0, align[8,low(-4)]
MapLut::
for V, 4
	db bank(xMap{x:V})
endr

section "flavorlut", rom0, align[8]
FlavorLut::
for V, 4
	db bank(xFlavor{x:V})
endr