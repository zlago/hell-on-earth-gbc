; le main file for this
; 
;        /"""/  /"""//"""""""""//"""/      /"""/
;       /   /  /   //   ______//   /      /   /
;      /   /  /   //   /      /   /      /   /
;     /    """   //    """""//   /      /   /
;    /   ___    //   ______//   /      /   /
;   /   /  /   //   /      /   /      /   /
;  /   /  /   //    """""//    """""//    """""/
; /___/  /___//_________//_________//_________/
; honestly i just dont know how to name this

include "hardware.inc"
include "macros.inc"
include "defines.inc"

section "crash", rom0[$38]
zCrash:
	ld b, b
	jr @

section "vblank", rom0[$40]
zVBlank:
	reti

for V, 4
section "int{x:V}" , rom0[$48+(V*8)]
zInt{x:V}:
	rst zCrash
endr

section "header", rom0[$100]
	di
	jp ConsoleCheck
	ds $150-@, $00

section "title", rom0
Title::
	; load splash screen
		; load tileset
			ld a, bank(xSplash2bpp)
			ld [rROMB], a
			ld hl, xSplash2bpp
			ld de, _VRAM+$1000
			ld bc, xSplash2bpp.end - xSplash2bpp
			call SafeCpy
		; load map
			ld hl, xSplashTilemap
			ld de, _SCRN0
			ld bc, xSplashTilemap.end - xSplashTilemap
			call SafeCpy
.loop
	halt
	; poll
		call Joy
	; go to next screen once start is hit
		ld a, [hPad1]
		ld b, a
		ldh a, [hPad1.diff]
		and b
		and PADF_START
	jr z, .loop
	jp Main

section "main", rom0
Main::
	; set player position
	ld a, bank(wxActor)
	ldh [rSMBK], a
	ld a, START_Y
	ld [wxActor.y], a
	if START_X != START_Y
		ld a, START_X
	endc
	ld [wxActor.x], a
	; load tileset
	ld a, bank(xTileset2bpp)
	ld [rROMB], a
	ld hl, xTileset2bpp
	ld de, _VRAM+$1000
	ld bc, xTileset2bpp.end - xTileset2bpp
	call SafeCpy
	; load player
	ld hl, xPlayer2bpp
	ld de, _VRAM
	ld bc, xPlayer2bpp.end - xPlayer2bpp
	call SafeCpy
	; load the map
	call LoadMap
.loop
	halt
	; DMA shadowOAM
		ld a, high(wSOAM)
		call hDMA
	; poll input
		call Joy
	; move player
		call MovePlayer
	; fill shadowOAM
		call Display
	jr .loop

section "objects", rom0
Display:
	ld a, bank(wxActor)
	ldh [rSMBK], a
	ld a, [wxActor.y]
	res 4, a
	add 2 ; offset
	add a
	add a
	add a
	ld [wSOAM+0], a
	ld a, [wxActor.x]
	res 4, a
	inc a ; offset
	add a
	add a
	add a
	ld [wSOAM+1], a
	ret

section "player", rom0
MovePlayer: ; this is a black box im telling you
	; check if player wants to move
	ld a, [hPad1]
	ld b, a
	ldh a, [hPad1.diff]
	and b
	and $f0
	ret z
	; if so, move
		ld b, a
		; vertically
			ld a, [wxActor.x]
			ld l, a
			ld a, [wxActor.y]
			; down
			sla b
			adc 0
			; up
			sla b
			sbc 0
			ld h, a
			ld c, a
			; check if colliding
			call CollideMap
			and TILE_SOLID
			; discard if so
			jr nz, .skipV
			ld a, c
			ld [wxActor.y], a
			.skipV
		; horizontally
			ld a, [wxActor.y]
			ld h, a
			ld a, l
			; left
			sla b
			sbc 0
			; right
			sla b
			adc 0
			; check if colliding
			ld l, a
			call CollideMap
			and TILE_SOLID
			; discard if so
			jr nz, .skipH
			ld a, l
			ld [wxActor.x], a
			.skipH
		ld c, $f0
	; check if hi(plrX) != hi(CamX)
		ld a, [wxActor.x]
		ld b, a
		ldh a, [hCamera.x]
		xor b
		and c
		jr nz, .load
	; check if hi(plrY) != hi(CamY)
		ld a, [wxActor.y]
		ld b, a
		ldh a, [hCamera.y]
		xor b
		and c
	.load ; if either !=, reload the map
		jp nz, LoadMap ; tail call???
	ret

section "fetchmaptile", rom0 ; name possibly misleading?
FetchMapTile:: ; h - Y, l - X, rROMB = bank, hl = tile, clobbers de
	; since hl is practically already pointing to the
	; tile we only need to actually fetch the bank
	; fetch and switch to bank
	ld a, h
	rlca
	rlca
	or %11111100
		assert low(MapLut) == %11111100
	ld e, a
	ld d, high(MapLut)
	ld a, [de]
	ld [rROMB], a
	; adjust h
	res 7, h
	set 6, h
		assert high(xMap1)  == (%0<<7) | (%1<<6)
	ret

section "loadmap", rom0
LoadMap::
	ld a, bank(wxActor)
	ldh [rSMBK], a
	; fetch the screen bank
	ld a, [wxActor.y]
	and $f0
	ldh [hCamera.y], a
	ld h, a
	ld a, [wxActor.x]
	and $f0
	ldh [hCamera.x], a
	ld l, a
	call FetchMapTile
	; load c and de
	ld c, 16 ; couldnt come up with a constant for this
	ld de, _SCRN0
	.column ; copy a column of rows
		ld b, 16/2 ; or this
		push hl
	.row ; copy a row
		.wait ; wait for safe access
		ldh a, [rSTAT]
		and STATF_BUSY
		jr nz, .wait
		rept 2 ; copy two bytes
			ld a, [hl+]
			ld [de], a
			inc e
			endr
		dec b
		jr nz, .row
	; adjust for the next row
		; hl
		pop hl
		inc h
		; de
		ld a, e
		add 15
		ld e, a
		inc de
		; then decrement counter
		dec c
		jr nz, .column
	; done
	ret

section "hram", hram
hCamera::
	.y ds 1 ; y position of camera
	.x ds 1 ; x position of camera

section "collidemap", rom0
CollideMap:: ; h - Y, l - X, h = %01000000 | (h & %00111111)
	call FetchMapTile
.noSwitch:: ; preserves hl
	ld a, [hl]
	push hl
	ld h, high(TileProperties)
	ld l, a
	ld a, [hl]
	pop hl
	; done
	ret

section "actors", wramx, align[8]
wxActor::
	.type ds 1
	.y    ds 1
	.x    ds 1
.next ds 256*(MAX_ACTORS-1)

section "tileset", romx
xTileset2bpp:
	incbin "tileset.2bpp"
	.end
xPlayer2bpp:
	incbin "player.2bpp"
	.end

section "splash", romx
xSplash2bpp:
	incbin "splash.2bpp"
	.end
xSplashTilemap:
	incbin "splash.tilemap"
	.end

for V, 4
section "map{x:V}", romx
xMap{x:V}::
	incbin "map.bin", V*(2**14), 2**14
endr

section "maplut", rom0, align[8,low(-4)]
MapLut::
for V, 4
	db bank(xMap{x:V})
endr